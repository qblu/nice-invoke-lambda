import awsSdk from 'aws-sdk';

const lambda = new awsSdk.Lambda();

export const invokeRequestResponse = (lambdaFunction:string, lambdaEvent:any) => {
	const params = {
		FunctionName: lambdaFunction,
		Payload: JSON.stringify(lambdaEvent),
		InvocationType: 'RequestResponse',
	};

	return lambda.invoke(params)
		.promise()
		.then((response) => {
			if (response.StatusCode !== 200) {
				// Lambda service failure
				throw new Error(
					`Failed to invoke Lambda function ${lambdaFunction}:\n${JSON.stringify(response, null, 2)}`,
				);
			}

			let payload;

			try {
				payload = JSON.parse(response.Payload as string);
			} catch (error) {
				// Bad JSON payload from Lambda service?
				const errorMessage = error.message || JSON.stringify(error, null, 2);
				throw new Error(
					`Failed to parse Lambda response payload '${response.Payload}':\n${errorMessage}`,
				);
			}

			if (response.FunctionError) {
				if (response.FunctionError === 'Unhandled') {
					/*
					 * 'Unhandled' means that there was an error or uncaught exception
					 * while executing the Lambda function. The content of the error
					 * object stored in the payload is generated by the Lambda service.
					 *
					 * Example of 'Unhandled' error payload:
					 * {
					 *   errorMessage: 'Unexpected token {',
					 *   errorType: 'SyntaxError',
					 *   stackTrace: [
					 *     'Module.load (module.js:343:32)',
					 *     'Function.Module._load (module.js:300:12)',
					 *     'Module.require (module.js:353:17)',
					 *     'require (internal/module.js:12:17)',
					 *   ],
					 * }
					 */
					throw payload;
				}

				if (response.FunctionError === 'Handled') {
					/*
					 * 'Handled' means that the Lambda function executed successfully
					 * but returned an error via the first argument of the handler's
					 * callback. Unfortunately, the Lambda service will always coerce
					 * the error argument to a string (i.e., example #2 below). We can
					 * however return JSON error strings for more complex content.
					 *
					 * Example #1 of 'Handled' error payload:
					 * { errorMessage: 'Failed to add numbers' }
					 *
					 * Example #2 of 'Handled' error payload:
					 * { errorMessage: '[object Object]' }
					 */

					let error;

					try {
						// Try to deserialize the error string, just in case
						error = JSON.parse(payload.errorMessage);
					} catch (jsonError) {
						// It's not JSON, so use the string as-is
						error = payload.errorMessage;
					}

					throw error;
				}

				// This should never happen
				throw new Error(`Unrecognized Lambda response FunctionError value '${response.FunctionError}'`);
			}

			// Successful response from Lambda
			return payload;
		});
};

export const invokeEvent = (lambdaFunction: string, lambdaEvent: any) => {
	const params = {
		FunctionName: lambdaFunction,
		Payload: JSON.stringify(lambdaEvent),
		InvocationType: 'Event',
	};

	return lambda.invoke(params)
		.promise()
		.then((response) => {
			if (response.StatusCode !== 202) {
				// Lambda service failure
				throw new Error(
					`Failed to invoke Lambda function ${lambdaFunction}:\n${JSON.stringify(response, null, 2)}`,
				);
			}
			return true;
		});
};

export const invoke = invokeRequestResponse;
export const invokeAsync = invokeEvent;
